// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/laik_ext.proto

#ifndef PROTOBUF_proto_2flaik_5fext_2eproto__INCLUDED
#define PROTOBUF_proto_2flaik_5fext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class laik_ext_msg;
class laik_ext_msgDefaultTypeInternal;
extern laik_ext_msgDefaultTypeInternal _laik_ext_msg_default_instance_;

namespace protobuf_proto_2flaik_5fext_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2flaik_5fext_2eproto

// ===================================================================

class laik_ext_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:laik_ext_msg) */ {
 public:
  laik_ext_msg();
  virtual ~laik_ext_msg();

  laik_ext_msg(const laik_ext_msg& from);

  inline laik_ext_msg& operator=(const laik_ext_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const laik_ext_msg& default_instance();

  static inline const laik_ext_msg* internal_default_instance() {
    return reinterpret_cast<const laik_ext_msg*>(
               &_laik_ext_msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(laik_ext_msg* other);

  // implements Message ----------------------------------------------

  inline laik_ext_msg* New() const PROTOBUF_FINAL { return New(NULL); }

  laik_ext_msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const laik_ext_msg& from);
  void MergeFrom(const laik_ext_msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(laik_ext_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string failing_nodes = 2;
  int failing_nodes_size() const;
  void clear_failing_nodes();
  static const int kFailingNodesFieldNumber = 2;
  const ::std::string& failing_nodes(int index) const;
  ::std::string* mutable_failing_nodes(int index);
  void set_failing_nodes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_failing_nodes(int index, ::std::string&& value);
  #endif
  void set_failing_nodes(int index, const char* value);
  void set_failing_nodes(int index, const char* value, size_t size);
  ::std::string* add_failing_nodes();
  void add_failing_nodes(const ::std::string& value);
  #if LANG_CXX11
  void add_failing_nodes(::std::string&& value);
  #endif
  void add_failing_nodes(const char* value);
  void add_failing_nodes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& failing_nodes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failing_nodes();

  // repeated string spare_nodes = 4;
  int spare_nodes_size() const;
  void clear_spare_nodes();
  static const int kSpareNodesFieldNumber = 4;
  const ::std::string& spare_nodes(int index) const;
  ::std::string* mutable_spare_nodes(int index);
  void set_spare_nodes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_spare_nodes(int index, ::std::string&& value);
  #endif
  void set_spare_nodes(int index, const char* value);
  void set_spare_nodes(int index, const char* value, size_t size);
  ::std::string* add_spare_nodes();
  void add_spare_nodes(const ::std::string& value);
  #if LANG_CXX11
  void add_spare_nodes(::std::string&& value);
  #endif
  void add_spare_nodes(const char* value);
  void add_spare_nodes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& spare_nodes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_spare_nodes();

  // @@protoc_insertion_point(class_scope:laik_ext_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> failing_nodes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> spare_nodes_;
  friend struct protobuf_proto_2flaik_5fext_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// laik_ext_msg

// repeated string failing_nodes = 2;
inline int laik_ext_msg::failing_nodes_size() const {
  return failing_nodes_.size();
}
inline void laik_ext_msg::clear_failing_nodes() {
  failing_nodes_.Clear();
}
inline const ::std::string& laik_ext_msg::failing_nodes(int index) const {
  // @@protoc_insertion_point(field_get:laik_ext_msg.failing_nodes)
  return failing_nodes_.Get(index);
}
inline ::std::string* laik_ext_msg::mutable_failing_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:laik_ext_msg.failing_nodes)
  return failing_nodes_.Mutable(index);
}
inline void laik_ext_msg::set_failing_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:laik_ext_msg.failing_nodes)
  failing_nodes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void laik_ext_msg::set_failing_nodes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:laik_ext_msg.failing_nodes)
  failing_nodes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void laik_ext_msg::set_failing_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failing_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:laik_ext_msg.failing_nodes)
}
inline void laik_ext_msg::set_failing_nodes(int index, const char* value, size_t size) {
  failing_nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:laik_ext_msg.failing_nodes)
}
inline ::std::string* laik_ext_msg::add_failing_nodes() {
  // @@protoc_insertion_point(field_add_mutable:laik_ext_msg.failing_nodes)
  return failing_nodes_.Add();
}
inline void laik_ext_msg::add_failing_nodes(const ::std::string& value) {
  failing_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:laik_ext_msg.failing_nodes)
}
#if LANG_CXX11
inline void laik_ext_msg::add_failing_nodes(::std::string&& value) {
  failing_nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:laik_ext_msg.failing_nodes)
}
#endif
inline void laik_ext_msg::add_failing_nodes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failing_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:laik_ext_msg.failing_nodes)
}
inline void laik_ext_msg::add_failing_nodes(const char* value, size_t size) {
  failing_nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:laik_ext_msg.failing_nodes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
laik_ext_msg::failing_nodes() const {
  // @@protoc_insertion_point(field_list:laik_ext_msg.failing_nodes)
  return failing_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
laik_ext_msg::mutable_failing_nodes() {
  // @@protoc_insertion_point(field_mutable_list:laik_ext_msg.failing_nodes)
  return &failing_nodes_;
}

// repeated string spare_nodes = 4;
inline int laik_ext_msg::spare_nodes_size() const {
  return spare_nodes_.size();
}
inline void laik_ext_msg::clear_spare_nodes() {
  spare_nodes_.Clear();
}
inline const ::std::string& laik_ext_msg::spare_nodes(int index) const {
  // @@protoc_insertion_point(field_get:laik_ext_msg.spare_nodes)
  return spare_nodes_.Get(index);
}
inline ::std::string* laik_ext_msg::mutable_spare_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:laik_ext_msg.spare_nodes)
  return spare_nodes_.Mutable(index);
}
inline void laik_ext_msg::set_spare_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:laik_ext_msg.spare_nodes)
  spare_nodes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void laik_ext_msg::set_spare_nodes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:laik_ext_msg.spare_nodes)
  spare_nodes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void laik_ext_msg::set_spare_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  spare_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:laik_ext_msg.spare_nodes)
}
inline void laik_ext_msg::set_spare_nodes(int index, const char* value, size_t size) {
  spare_nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:laik_ext_msg.spare_nodes)
}
inline ::std::string* laik_ext_msg::add_spare_nodes() {
  // @@protoc_insertion_point(field_add_mutable:laik_ext_msg.spare_nodes)
  return spare_nodes_.Add();
}
inline void laik_ext_msg::add_spare_nodes(const ::std::string& value) {
  spare_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:laik_ext_msg.spare_nodes)
}
#if LANG_CXX11
inline void laik_ext_msg::add_spare_nodes(::std::string&& value) {
  spare_nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:laik_ext_msg.spare_nodes)
}
#endif
inline void laik_ext_msg::add_spare_nodes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  spare_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:laik_ext_msg.spare_nodes)
}
inline void laik_ext_msg::add_spare_nodes(const char* value, size_t size) {
  spare_nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:laik_ext_msg.spare_nodes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
laik_ext_msg::spare_nodes() const {
  // @@protoc_insertion_point(field_list:laik_ext_msg.spare_nodes)
  return spare_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
laik_ext_msg::mutable_spare_nodes() {
  // @@protoc_insertion_point(field_mutable_list:laik_ext_msg.spare_nodes)
  return &spare_nodes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2flaik_5fext_2eproto__INCLUDED
